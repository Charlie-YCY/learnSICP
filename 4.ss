;(load "D:/AAAprograms_codes/learnSICP/4.ss")
(define true #t)
(define false #f)
(define apply_in_underlying_scheme
    apply)

(define (apply procedure arguments)
    (cond ((primitive_procedure? procedure)
                      (apply_primitive_procedure procedure arguments))
          ((compound_procedure? procedure)
                (begin (display "M_eval  apply compound procedure")
                    (eval_sequence
                            (procedure_body procedure)
                            (extend_environment
                                    (procedure_parameters procedure)
                                    arguments
                                    (procedure_environment procedure)))))
          (else (error 'apply "IN M eval Unknown procedure type -- Apply" procedure arguments))))

(define (eval exp env)
    (cond ((self_evaluating? exp) exp)
          ((variable? exp) (lookup_variable_value exp env))
          ((quoted? exp) (text_of_quotation exp))
          ((assignment? exp) (eval_assignment exp env))
          ((definition? exp) (eval_definition exp env))
          ((if? exp) (eval_if exp env))
          ((lambda? exp)
                (make_procedure (lambda_parameters exp)
                                (lambda_body exp)
                                env))
          ((begin? exp)
                (eval_sequence (begin_actions exp) env))
          ((cond? exp) (eval (cond->if exp) env))
          ((application? exp)
                (apply (eval (operator exp) env)
                       (list_of_values (operands exp) env)))
          (else (error 'eval "IN M eval Unknow expression type! --EVAL" exp))))

(define (list_of_values exps env)
    (if (no_operands? exps)
        '()
        (cons (eval (first_operand exps) env)
              (list_of_values (rest_operands exps) env))))
(define (eval_if exp env)
      (if (true? (eval (if_predicate exp) env))
            (eval (if_consequent exp) env)
            (eval (if_alternative exp) env)))
(define (eval_sequence exps env)
      (cond ((last_exp? exps) (eval (first_exp exps) env))
            (else (eval (first_exp exps) env)
                  (eval_sequence (rest_exps exps) env))))
(define (eval_assignment exp env)
      (set_variable_value! (assignment_variable exp)
                           (eval (assignment_value exp) env)
                           env)
            'ok)
(define (eval_definition exp env)
      (define_variable! (definition_variable exp)
                        (eval (definition_value exp) env)
                        env)
            'ok)
(define (self_evaluating? exp)
           (cond ((number? exp) true)
                 ((string? exp) true)
                 (else false)))
(define (variable? exp) (symbol? exp))

(define (quoted? exp)
            (tagged_list? exp 'quote))
(define (text_of_quotation exp) (cadr exp))
(define (tagged_list? exp tag)
            (if (pair? exp)
                (eq? (car exp) tag)
                false))
(define (assignment? exp)
            (tagged_list? exp 'set!))
(define (assignment_variable exp) (cadr exp))
(define (assignment_value exp) (caddr exp))
(define (definition? exp)
            (tagged_list? exp 'define))
(define (definition_variable exp)
            (if (symbol? (cadr exp))
                (cadr exp)
                (caadr exp)))
(define (definition_value exp)
            (if (symbol? (cadr exp))
                (caddr exp)
                (make_lambda (cdadr exp) ; formal parameters
                             (cddr exp)))) ; body
(define (lambda? exp) (tagged_list? exp 'lambda))
(define (lambda_parameters exp) (cadr exp))
(define (lambda_body exp) (cddr exp))
(define (make_lambda parameters body)
            (cons 'lambda (cons parameters body)))
(define (if? exp) (tagged_list? exp 'if))
(define (if_predicate exp) (cadr exp))
(define (if_consequent exp) (caddr exp))
(define (if_alternative exp)
            (if (not (null? (cdddr exp)))
                (cadddr exp)))
(define (make_if predicate consequent alternative)
            (list 'if predicate consequent alternative))
(define (begin? exp) (tagged_list? exp 'begin))
(define (begin_actions exp) (cdr exp))
(define (last_exp? seq) (null? (cdr seq)))
(define (first_exp seq) (car seq))
(define (rest_exps seq) (cdr seq))
(define (sequence->exp seq)
            (cond ((null? seq) seq)
                  ((last_exp? seq) (first_exp seq))
                  (else (make_begin seq))))
(define (make_begin seq) (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no_operands? ops) (null? ops))
(define (first_operand ops) (car ops))
(define (rest_operands ops) (cdr ops))
(define (cond? exp) (tagged_list? exp 'cond))
(define (cond_clauses exp) (cdr exp))
(define (cond_else_clause? clause)
      (eq? (cond_predicate clause) 'else))
(define (cond_predicate clause) (car clause))
(define (cond_actions clause) (cdr clause))
(define (cond->if exp)
        (expand_clauses (cond_clauses exp)))
(define (expand_clauses clauses)
        (if (null? clauses) 'false ; no else clause
            (let ((first (car clauses))(rest (cdr clauses)))
                 (if (cond_else_clause? first)
                     (if (null? rest)
                         (sequence->exp (cond_actions first))
                         (error 'expand_clauses "ELSE clause isn't last -- COND->IF" clauses))
                     (make_if (cond_predicate first)
                              (sequence->exp (cond_actions first))
                              (expand_clauses rest))))))
(define (true? x)
      (not (eq? x false)))
(define (false? x)
      (eq? x false))
(define (make_procedure parameters body env)
      (list 'procedure parameters body env))
(define (compound_procedure? p)
      (tagged_list? p 'procedure))
(define (procedure_parameters p) (cadr p))
(define (procedure_body p) (caddr p))
(define (procedure_environment p) (cadddr p))
(define (enclosing_environment env) (cdr env))
(define (first_frame env) (car env))
(define the_empty_environment '())
(define (make_frame variables values)
      (cons variables values))
(define (frame_variables frame) (car frame))
(define (frame_values frame) (cdr frame))
(define (add_binding_to_frame! var val frame)
      (set-car! frame (cons var (car frame)))
      (set-cdr! frame (cons val (cdr frame))))
(define (extend_environment vars vals base_env)
      (if (= (length vars) (length vals))
          (cons (make_frame vars vals) base_env)
          (if (< (length vars) (length vals))
              (error 'extend_environment "Too many arguments supplied" vars vals)
              (error 'extend_environment "Too few arguments supplied" vars vals))))
(define (lookup_variable_value var env)
      (define (env_loop env)
            (define (scan vars vals)
                    (cond ((null? vars)
                           (env_loop (enclosing_environment env)))
                          ((eq? var (car vars))
                           (car vals))
                          (else (scan (cdr vars) (cdr vals)))))
            (if (eq? env the_empty_environment)
                (error 'loolup_variable_value "Unbound variable" var)
                (let ((frame (first_frame env)))
                     (scan (frame_variables frame)
                           (frame_values frame)))))
      (env_loop env))
(define (set_variable_value! var val env)
        (define (env_loop env)
                (define (scan vars vals)
                        (cond ((null? vars)
                               (env_loop (enclosing_environment env)))
                              ((eq? var (car vars))
                               (set-car! vals val))
                              (else (scan (cdr vars) (cdr vals)))))
                                    (if (eq? env the_empty_environment)
                                        (error 'set_variable_value "Unbound variable -- SET!" var)
                                        (let ((frame (first_frame env)))
                                             (scan (frame_variables frame)
                                                   (frame_values frame)))))
        (env_loop env))
(define (define_variable! var val env)
        (let ((frame (first_frame env)))
             (define (scan vars vals)
                     (cond ((null? vars)
                            (add_binding_to_frame! var val frame))
                           ((eq? var (car vars))
                            (set-car! vals val))
                           (else (scan (cdr vars) (cdr vals)))))
             (scan (frame_variables frame)
                   (frame_values frame))))

; primitive_procedures  (primitive_procedure_names) (primitive_procedure_objects) 写在(setup_environment)前面
(define primitive_procedures
        (list (list 'car car)
              (list 'cdr cdr)
              (list 'cons cons)
              (list 'null? null?)
              (list 'error error)
            ;   others
))                  
(define (primitive_procedure_names)
        (map car primitive_procedures))
(define (primitive_procedure_objects)
        (map (lambda (proc) (list 'primitive (cadr proc)))
             primitive_procedures))
(define (setup_environment)
        (let ((initial_env
                     (extend_environment (primitive_procedure_names)
                                  (primitive_procedure_objects) the_empty_environment)))
             (define_variable! 'true true initial_env)
             (define_variable! 'false false initial_env)
             initial_env))
(define the_global_environment (setup_environment))
(define (primitive_procedure? proc)
        ; (display "primitive_procedure?")
        ; (display proc)
        (tagged_list? proc 'primitive))
(define (primitive_implementation proc) (cadr proc))


(define (apply_primitive_procedure proc args)
        (apply_in_underlying_scheme
            (primitive_implementation proc) args))
(define input_prompt ";;; M_Eval input:")
(define output_prompt ";;; M_Eval value:")
(define (driver_loop)
        (prompt_for_input input_prompt)
        (let ((input (read)))
             (let ((output (eval input the_global_environment)))
                  (announce_output output_prompt)
                  (user_print output)))
        (driver_loop))
(define (prompt_for_input string)
        (newline) (newline) (display string) (newline))
(define (announce_output string)
        (newline) (display string) (newline))
(define (user_print object)
        (if (compound_procedure? object)
            (display (list 'compound_procedure
                           (procedure_parameters object)
                           (procedure_body object)
                            '<procedure_env>))
            (display object)))

; (define the_global_environment (setup_environment))
(driver_loop)


